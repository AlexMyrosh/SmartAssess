@model Presentation_Layer.ViewModels.ExamAssessment.ExamManualEvaluationViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="container-fluid" style="padding: 0;">
    <div class="decor-default">
        <div class="contact">
            <div class="controls">
                <div class="image-container">
                    <img src="/images/banners/banner-3.jpg">
                    <div class="centered">
                        <h1 class="display-1" style="font-size: 6vw; font-weight: 400;">
                            @Model.ExamName
                        </h1>
                    </div>
                </div>
            </div>

            <div class="container" style="margin-top: 30px;">
                <div class="container mt-5">
                    <div class="container">
                        <div class="row">
                            <div class="col d-flex align-items-stretch">
                                <div class="card bg-c-indigo order-card flex-fill">
                                    <div class="card-body">
                                        <h2 class="m-b-20 text-center">Student name</h2>
                                        <h3 class="text-center"><span>@Model.UserFirstName @Model.UserLastName</span></h3>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col d-flex align-items-stretch">
                                <div class="card bg-c-indigo order-card flex-fill">
                                    <div class="card-body">
                                        <h2 class="m-b-20 text-center">Total grade</h2>
                                        <h3 class="text-center"><span><span id="totalGrade"></span></span></h3>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col d-flex align-items-stretch">
                                <div class="card bg-c-indigo order-card flex-fill">
                                    <div class="card-body">
                                        <h2 class="m-b-20 text-center">Result</h2>
                                        <h3 class="text-center"><span><span id="examResult"></span></span></h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <form method="post" asp-action="ManualEvaluation">
                    <div class="container" style="=margin-bottom: 30px;">
                        <div class="text-center">
                            <h1 class="display-4">Questions & Answers</h1>
                        </div>
                        @for (var i = 0; i < Model.UserAnswers.Count; i++)
                        {
                            <div class="card mb-3 question" id="question-@i" style="background-color: #f2f2f2; border-radius: 15px;">
                                <div class="card-body">
                                    <h5 class="card-title">Question @(i + 1) of @Model.UserAnswers.Count</h5>
                                    <p class="card-text">@Model.UserAnswers[i].QuestionText</p>
                                    <h5 class="card-title">Student's answer</h5>
                                    @if (string.IsNullOrWhiteSpace(Model.UserAnswers[i].AnswerText))
                                    {
                                        <p class="card-text"><em>No answer provided...</em></p>
                                    }
                                    else
                                    {
                                        <p class="card-text">@Model.UserAnswers[i].AnswerText</p>
                                    }

                                    <p>
                                        <strong>
                                            Grade (max grade - @Model.UserAnswers[i].QuestionMaxGrade):
                                        </strong>
                                        <input min="0" max="@Model.UserAnswers[i].QuestionMaxGrade" type="number" asp-for="@Model.UserAnswers[i].Grade" class="form-control grade" style="width: 80px;" />
                                    </p>

                                    <h5 class="card-title">Feedback</h5>
                                    <textarea rows="5" asp-for="@Model.UserAnswers[i].QuestionAnswerFeedback" class="form-control" placeholder="Write something about the student's' answer"></textarea>
                                </div>
                            </div>
                        }

                        <div class="container d-flex justify-content-center">
                            <nav aria-label="Page navigation example">
                                <ul class="pagination" id="pagination-nav">
                                    @for (int i = 0; i < Model.UserAnswers.Count; i++)
                                    {
                                        <li class="page-item me-2" data-page="@i">
                                            <a class="page-link" href="javascript:void(0);" onclick="showQuestion(@i)">
                                                @(i + 1)
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        </div>

                        <div>
                            <div class="text-center">
                                <h1 class="display-4">Overall exam feedback</h1>
                            </div>
                            @Html.TextAreaFor(model => model.GeneralFeedback, 10, 50, new { @class = "form-control", placeholder = "Write something about pros and cons of student's answers" })
                        </div>
                    </div>

                    <div class="text-center mb-3 mt-3">
                        <input type="submit" value="Save" class="btn btn-success" style="border-radius: 50px; font-size: 20px;" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
    <script>
        // Select all input elements with the class 'grade'
        var inputs = document.querySelectorAll('.grade');

        // Function to adjust input values
        function adjustInputValue(input) {
            var min = parseInt(input.getAttribute('min')) || 0; // Default minimum to 0 if not set
            var max = parseInt(input.getAttribute('max')) || 100; // Default maximum to 100 if not set, you can change this

            // Force value to be within the min and max
            if (parseInt(input.value) < min) {
                input.value = min;
            } else if (parseInt(input.value) > max) {
                input.value = max;
            }
            }

            // Add event listeners to each input
            inputs.forEach(function(input) {
            input.addEventListener('input', function() {
                adjustInputValue(input);
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize to show the first question
            showQuestion(0);
        });

        function showQuestion(currentPage) {
            let allPageItems = document.querySelectorAll('#pagination-nav .page-item');
            let allQuestions = document.querySelectorAll(".question");

            // Update the active class on pagination items
            allPageItems.forEach((item, index) => {
                if (index === currentPage) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });

            // Display the corresponding question
            allQuestions.forEach(question => {
                if (question.id === `question-${currentPage}`) {
                    question.classList.add('active');
                } else {
                    question.classList.remove('active');
                }
            });
        }
    </script>

    <script>
        function calculateTotalGrade() {
            let totalGrade = 0;
            let examResult = 'Failed';
            $('.grade').each(function() {
                let grade = $(this).val();
                totalGrade += parseInt(grade, 10) || 0;
            });

            if (totalGrade >= @Model.ExamMinimumPassGrade) {
                examResult = 'Passed';
            }

            $('#totalGrade').text(totalGrade);
            $('#examResult').text(examResult);
        }

        calculateTotalGrade();
        $('.grade').change(calculateTotalGrade);
    </script>
}