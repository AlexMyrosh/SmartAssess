@model Presentation_Layer.ViewModels.UserViewModel

@{
    ViewData["Title"] = "Profile";
    var successNotification = TempData["SuccessNotification"] as string;
    var errorNotification = TempData["ErrorNotification"] as string;
}

<style>
    .link-button {
        background: none !important;
        border: none;
        padding: 0 !important;
        color: #0d6efd;
        cursor: pointer;
    }

    /* Hide up/down spinner for number inputs */
    .codeConfirmationInputCell{
        -webkit-appearance: none;
        margin: 0;
    }

    .codeConfirmationInputCell {
        -moz-appearance: textfield; /* Firefox */
    }
</style>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-7 col-lg-4 mb-5 mb-lg-0 wow fadeIn pb-4">
            <div class="card border-0 shadow">
                <form id="uploadForm" asp-action="UpdateImage" method="post" enctype="multipart/form-data">
                    <div class="image-container" onclick="document.getElementById('fileUpload').click();">
                        @if (string.IsNullOrWhiteSpace(Model.ImagePath))
                        {
                            <img src="@Url.Content("~/images/default-user-photo.png")" alt="Add user image">
                        }
                        else
                        {
                            <img src="@Url.Content("~/images/" + System.IO.Path.GetFileName(Model.ImagePath))" alt="User Image"/>
                        }

                        <div class="overlay">Update Photo</div>
                        <input type="hidden" name="userId" value="@Model.Id" />
                        <input type="file" id="fileUpload" name="file" style="display: none;" onchange="submitForm();"/>
                    </div>
                </form>
                @if (!string.IsNullOrWhiteSpace(Model.ImagePath))
                {
                    <form asp-action="RemoveImage" asp-controller="Account" method="post">
                        <input type="hidden" name="userId" value="@Model.Id" />
                        <div class="d-grid justify-content-md-end me-2 mt-2" style="margin-bottom: -1rem;">
                            <button type="submit" class="link-button">Remove Image</button>
                        </div>
                    </form>
                }
                <div class="card-body p-1-9" style="padding: 2rem 2rem 1rem 2rem">
                    <div class="mb-4">
                        <div class="mb-1 wow fadeIn">
                            <div class="row">
                                <div class="col-11">
                                    <h3 id="nameDisplay" class="h4 mb-0">@Model.FirstName @Model.LastName</h3>
                                </div>
                                <div class="col-1">
                                    <i id="editNameButton" class="fas fa-pencil-alt display-25 clickable-icon" style="font-size:18px;margin-left: auto;"></i>
                                </div>
                            </div>
                            <div class="form-floating mb-3" style="display:none;" id="firstNameEditContainer">
                                <input id="firstNameEdit" type="text" class="form-control" placeholder="First name"/>
                                <label for="firstNameEdit" class="form-label">First name</label>
                            </div>
                            <div class="form-floating mb-3" style="display:none;" id="lastNameEditContainer">
                                <input id="lastNameEdit" type="text" class="form-control" placeholder="Last name"/>
                                <label for="lastNameEdit" class="form-label">Last name</label>
                            </div>
                            <button id="saveNameButton" style="display:none;" class="btn btn-success">Save</button>
                            <button id="cancelNameButton" style="display:none;" class="btn btn-warning">Cancel</button>
                        </div>
                        <span class="text-primary">@string.Join(", ", Model.Roles)</span>
                    </div>
                    <div id="userInfoContainer">
                        <ul class="list-unstyled mb-4">
                            <div class="mb-1 wow fadeIn">
                                <div class="row">
                                    <div class="col-11">
                                        <li class="mb-3" title="Email">
                                            <i class="far fa-envelope display-25 me-3 text-secondary"></i>
                                            <span id="emailText">@Model.Email</span>
                                        </li>
                                        <li class="mb-3" title="Phone number">
                                            <i class="fas fa-mobile-alt display-25 me-3 text-secondary"></i>
                                            <span id="phoneNumberText">@Model.PhoneNumber</span>
                                        </li>
                                        <li id="userLocationInfo" class="mb-3" title="Location">
                                            <i class="fas fa-map-marker-alt display-25 me-3 text-secondary"></i>
                                            <span id="locationText">@Model.City, @Model.Country</span>
                                        </li>
                                        <li id="EducationInstitution" class="mb-3" title="Educational institution">
                                            <i class="fas fa-university display-25 me-3 text-secondary"></i>
                                            <span id="educationalInstitutionText">@Model.EducationalInstitution</span>
                                        </li>
                                        <li title="Last login">
                                            <i class="fas fa-clock display-25 me-3 text-secondary"></i>
                                            <span id="lastLogInDateTimeText">@Model.LastLogInDateTime</span>
                                        </li>
                                    </div>
                                    <div class="col-1">
                                        <i id="editUserInfoButton" class="fas fa-pencil-alt display-25 clickable-icon" style="font-size:18px;margin-left: auto;"></i>
                                    </div>
                                </div>
                            </div>
                        </ul>
                    </div>
                    
                    @* Update user info form *@
                    <div id="userInfoEditContainer" style="display:none;">
                        <ul class="list-unstyled mb-4">
                            <div class="mb-1 wow fadeIn">
                                <li class="mb-3" title="Email"><i class="far fa-envelope display-25 me-3 text-secondary"></i>@Model.Email</li>
                                <li class="mb-3" title="Phone number"><i class="fas fa-mobile-alt display-25 me-3 text-secondary"></i>@Model.PhoneNumber</li>

                                <li class="mb-3" title="Location">
                                    <div class="row">
                                        <div class="col-1">
                                            <i class="fas fa-map-marker-alt display-25 me-3 text-secondary"></i>
                                        </div>
                                        <div class="col">
                                            <select id="country" name="country" onchange="updateCities(this.value)" class="form-select">
                                                <option value="" selected disabled>Country</option>
                                            </select>
                                        </div>
                                        <div class="col">
                                            <select id="city" name="city" class="form-select">
                                                <option value="" selected disabled>City</option>
                                            </select>
                                        </div>
                                    </div>
                                </li>

                                <li title="Educational institution">
                                    <div class="row">
                                        <div class="col-1">
                                            <i class="fas fa-university display-25 me-3 text-secondary"></i>
                                        </div>
                                        <div class="col-11">
                                            <div class="form-floating mb-3" id="EducationInstitutionEditContainer">
                                                <input id="EducationInstitutionEdit" type="text" class="form-control" placeholder="Education institution"/>
                                                <label for="EducationInstitutionEdit" class="form-label">Educational institution</label>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li class=" mb-3" title="Last login"><i class="fas fa-clock display-25 me-3 text-secondary"></i>@Model.LastLogInDateTime</li>
                                <button id="saveUserInfoButton" class="btn btn-success">Save</button>
                                <button id="cancelUserInfoButton" class="btn btn-warning">Cancel</button>
                            </div>
                        </ul>
                    </div>
                    <div>
                        <button type="button" class="link-button" data-bs-toggle="modal" data-bs-target="#passwordChangeModal">
                            Change password
                        </button>
                        <br />
                        <button type="button" class="link-button" data-bs-toggle="modal" data-bs-target="#phoneNumberChangeModal">
                            Change phone number
                        </button>
                        <br />
                        <button type="button" class="link-button" data-bs-toggle="modal" data-bs-target="#emailChangeModal">
                            Change email
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="ps-lg-1-6 ps-xl-5">
                <div class="mb-1 wow fadeIn">
                    <div class="text-start mb-1-6 wow fadeIn">
                        <div class="d-flex flex-md-row flex-column align-items-center">
                            <h2 class="h1 mb-0 text-primary">#About Me</h2>
                            <i id="editButton" class="fas fa-pencil-alt display-25 ms-3 me-3 clickable-icon" style="font-size:18px;"></i>
                        </div>
                    </div>
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <pre id="descriptionDisplay" style="white-space: pre-wrap;">@Model.AboutUser</pre>
                            </div>
                        </div>
                    </div>
                    <textarea class="form-control mb-2" id="descriptionEdit" rows="4" style="display:none;"></textarea>
                    <button id="saveButton" style="display:none;" class="btn btn-success">Save</button>
                    <button id="cancelButton" style="display:none;" class="btn btn-warning">Cancel</button>
                </div>
                <div class="mb-5 wow fadeIn">
                    <div class="text-start mb-1-6 wow fadeIn">
                        <h2 class="mb-0 text-primary">#Applied courses</h2>
                    </div>
                    <div class="row mt-n4">
                        @foreach (var course in Model.Courses)
                        {
                            <div class="col-sm-6 col-xl-4 mt-4">
                                <div class="card text-center border-0 rounded-3">
                                    <div class="card-body">
                                        <i class="ti-bookmark-alt icon-box medium rounded-3 mb-4"></i>
                                        <h3 class="h5 mb-3">@Html.ActionLink(course.Name, "Details", "Course", new { id = course.Id }, new {style="text-decoration: none; color: black;"})</h3>
                                        <p class="mb-0">@course.Description</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    @if (!string.IsNullOrEmpty(successNotification))
    {
        <div class="toast bg-success text-white show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
                <div class="d-flex gap-4">
                    <span><i class="fa fa-check-circle fa-lg"></i></span>
                    <div class="d-flex flex-grow-1 align-items-center">
                        <span class="fw-semibold">@successNotification</span>
                        <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorNotification))
    {
        <div class="toast bg-danger text-white show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
                <div class="d-flex gap-4">
                    <span><i class="fa fa-exclamation-circle fa-lg"></i></span>
                    <div class="d-flex flex-grow-1 align-items-center">
                        <span class="fw-semibold">@errorNotification</span>
                        <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal for password change-->
<div class="modal fade" id="passwordChangeModal" tabindex="-1" aria-labelledby="passwordChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="passwordChangeModalLabel">Password change</h1>
                <button id="closePasswordChangeCrossButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-floating mb-3">
                    <input id="currentPasswordField" type="password" class="form-control" placeholder="Education institution" />
                    <label for="currentPasswordField" class="form-label">Current password</label>
                </div>
                    
                <div class="form-floating mb-3">
                    <input id="newPasswordField" type="password" class="form-control" placeholder="Education institution" />
                    <label for="newPasswordField" class="form-label">New password</label>
                </div>
                    
                <div class="form-floating">
                    <input id="confirmNewPasswordField" type="password" class="form-control" placeholder="Education institution" />
                    <label for="confirmNewPasswordField" class="form-label">Confirm new password</label>
                </div>
                <div id="passwordChangeErrorContainer" style="display: none;">
                    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show mt-3" style="margin-bottom: 0">
                        <i class="bi-exclamation-octagon-fill" style="font-size: 1.5em; line-height: 1;"></i>
                        <strong class="mx-2">Error!</strong>
                        <pre id="passwordChangeErrorText" style="margin-bottom: 0; white-space: pre-wrap;"></pre>
                        <button id="closeErrorsButton" type="button" class="btn-close"></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="closePasswordChangeButton" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="updatePasswordButton" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for phone number change -->
<div class="modal fade" id="phoneNumberChangeModal" tabindex="-1" aria-labelledby="phoneNumberChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="phoneNumberChangeModalLabel">Phone number change</h1>
                <button id="verifyPhoneNumberCloseCrossButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="phoneNumberContainer">
                    <div class="form-floating">
                        <input id="phoneNumberField" type="text" class="form-control" placeholder="Phone number"/>
                        <label for="phoneNumberField" class="form-label">Phone number</label>
                    </div>
                </div>

                <div id="verificationCodeContainer" style="display: none;">
                    <span class="mobile-text">Enter the code we just sent on <b id="confirmationCodePhoneNumber" class="text-danger"></b></span>
                    <div class="d-flex flex-row mt-4">
                        <input type="text" class="form-control me-2 codeConfirmationInputCell" autofocus=""
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 1)" onkeydown="handleKeyDown(event, this, 0)">
                        <input type="text" class="form-control me-2 codeConfirmationInputCell"
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 2)" onkeydown="handleKeyDown(event, this, 1)">
                        <input type="text" class="form-control me-2 codeConfirmationInputCell"
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 3)" onkeydown="handleKeyDown(event, this, 2)">
                        <input type="text" class="form-control me-2 codeConfirmationInputCell"
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 4)" onkeydown="handleKeyDown(event, this, 3)">
                        <input type="text" class="form-control me-2 codeConfirmationInputCell"
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 5)" onkeydown="handleKeyDown(event, this, 4)">
                        <input type="text" class="form-control codeConfirmationInputCell"
                               inputmode="numeric" pattern="[0-9]*" oninput="handleInput(this, 6)" onkeydown="handleKeyDown(event, this, 5)">
                    </div>
                    
                    <div class="text-center mt-4">
                        <span class="d-block mobile-text">Don't receive the code?</span>
                        <span id="resend-button" class="font-weight-bold text-danger cursor" style="pointer-events: none; opacity: 0.5;">Resend</span>
                        <span class="font-weight-bold timer_text">in</span>
                        <span id="timer" class="font-weight-bold text-danger">60</span>
                        <span class="font-weight-bold timer_text">seconds</span>
                    </div>
                </div>
                
                <div id="phoneNumberChangeErrorContainer" style="display: none;">
                    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show mt-3" style="margin-bottom: 0">
                        <i class="bi-exclamation-octagon-fill" style="font-size: 1.5em; line-height: 1;"></i>
                        <strong class="mx-2">Error!</strong>
                        <pre id="phoneNumberChangeErrorText" style="margin-bottom: 0; white-space: pre-wrap;"></pre>
                        <button id="closeErrorsforPhoneNumberChangeButton" type="button" class="btn-close"></button>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button id="verifyPhoneNumberBackButton" type="button" class="btn btn-secondary" style="display: none;">Back</button>
                <button id="verifyPhoneNumberCloseButton" type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="display: none;">Close</button>
                <button id="sendVerificationCodeButton" type="button" class="btn btn-primary">Send Verification Code</button>
                <button id="confirmVerificationCodeButton" type="button" class="btn btn-primary" style="display: none;">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for email change-->
<div class="modal fade" id="emailChangeModal" tabindex="-1" aria-labelledby="emailChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="emailChangeModalLabel">Email change</h1>
                <button id="closeEmailUpdateCrossButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-floating">
                    <input id="newEmailField" type="email" class="form-control" placeholder="Education institution" />
                    <label for="newEmailField" class="form-label">New email</label>
                </div>
                <div id="emailChangeErrorContainer" style="display: none;">
                    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show mt-3" style="margin-bottom: 0">
                        <i class="bi-exclamation-octagon-fill" style="font-size: 1.5em; line-height: 1;"></i>
                        <strong class="mx-2">Error!</strong>
                        <pre id="emailChangeErrorText" style="margin-bottom: 0; white-space: pre-wrap;"></pre>
                        <button id="closeErrorsforEmailChangeButton" type="button" class="btn-close"></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="closeEmailUpdateButton" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="updateEmailButton" type="button" class="btn btn-primary">Send confirmation message</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification message -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="testToast" class="toast bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
            <div class="d-flex gap-4">
                <span> <i class="fa fa-check-circle fa-lg"></i></span>
                <div class="d-flex flex-grow-1 align-items-center">
                    <span class="fw-semibold" id="testToastMessage" style="font-size: initial;"></span>
                </div>
                <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
    @* Update phone number logic *@
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const timerElement = document.getElementById('timer');
            const resendButton = document.getElementById('resend-button');
            let timeLeft = 10; // 60 seconds timer

            function updateTimer() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    resendButton.style.pointerEvents = 'auto'; // Enable button
                    resendButton.style.opacity = '1'; // Full opacity
                    resendButton.classList.remove('text-danger');
                    resendButton.classList.add('text-success');
                    timerElement.textContent = ''; // Remove timer text
                    $('.timer_text').text('');
                } else {
                    timerElement.textContent = timeLeft;
                    timeLeft -= 1;
                }
            }

            // Start the timer when the modal is opened
            const timerInterval = setInterval(updateTimer, 1000);

            // Optionally: Add event listener to the resend button
            resendButton.addEventListener('click', () => {
                if (resendButton.style.pointerEvents === 'auto') {
                    // Handle the resend action here
                    console.log('Resend button clicked');
                }
            });
        });


        $(function () {
            $('#sendVerificationCodeButton').on('click', function () {
                var phoneNumberValue = $('#phoneNumberField').val();
                $.ajax({
                    url: '@Url.Action("SendVerificationCode", "Account")',
                    type: 'POST',
                    data: { phoneNumber: phoneNumberValue },
                    success: function (response) {
                        if (response.success) {
                            $('#phoneNumberContainer').hide();
                            $('#verificationCodeContainer').show();
                            $('#confirmationCodePhoneNumber').text(phoneNumberValue);
                            $('#sendVerificationCodeButton').hide();
                            $('#confirmVerificationCodeButton').show();
                            $('#closeErrorsforPhoneNumberChangeButton').click();
                            $('#verifyPhoneNumberBackButton').show();
                            startTimer();
                        } else {
                            $('#phoneNumberChangeErrorContainer').show();
                            $('#phoneNumberChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#phoneNumberChangeErrorContainer').show();
                        $('#phoneNumberChangeErrorText').text(response.message);
                    }
                });
            });

            $('#confirmVerificationCodeButton').on('click', function () {
                const fields = document.querySelectorAll('.codeConfirmationInputCell');
                const fullVerificationCode = Array.from(fields).map(field => field.value).join('');

                $.ajax({
                    url: '@Url.Action("ConfirmVerificationCode", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', code: fullVerificationCode },
                    success: function (response) {
                        if (response.success) {
                            $('#verifyPhoneNumberCloseButton').click();
                            $('#phoneNumberField').val ('');
                            $('#phoneNumberContainer').show();
                            $('#verificationCodeContainer').hide();
                            $('#sendVerificationCodeButton').show();
                            $('#confirmVerificationCodeButton').hide();
                            $('.codeConfirmationInputCell').val('');
                            $('#closeErrorsforPhoneNumberChangeButton').click();
                            $('#verifyPhoneNumberBackButton').hide();
                        } else {
                            $('#phoneNumberChangeErrorContainer').show();
                            $('#phoneNumberChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#phoneNumberChangeErrorContainer').show();
                        $('#phoneNumberChangeErrorText').text(response.message);
                    }
                });
            });

            $('#closeErrorsforPhoneNumberChangeButton').on('click', function () {
                $('#phoneNumberChangeErrorContainer').hide();
            });

            $('#verifyPhoneNumberCloseButton').on('click', function () {
                $('#phoneNumberField').val('');
                $('.codeConfirmationInputCell').val('');
                $('#phoneNumberContainer').show();
                $('#verificationCodeContainer').hide();
                $('#sendVerificationCodeButton').show();
                $('#confirmVerificationCodeButton').hide();
                $('#verifyPhoneNumberBackButton').hide();
            });

            $('#verifyPhoneNumberCloseCrossButton').on('click', function () {
                $('#phoneNumberField').val('');
                $('.codeConfirmationInputCell').val('');
                $('#phoneNumberContainer').show();
                $('#verificationCodeContainer').hide();
                $('#sendVerificationCodeButton').show();
                $('#confirmVerificationCodeButton').hide();
                $('#verifyPhoneNumberBackButton').hide();
                $('#closeErrorsforPhoneNumberChangeButton').click();
            });

            $('#verifyPhoneNumberBackButton').on('click', function () {
                $('.codeConfirmationInputCell').val('');
                $('#phoneNumberContainer').show();
                $('#verificationCodeContainer').hide();
                $('#sendVerificationCodeButton').show();
                $('#confirmVerificationCodeButton').hide();
                $('#verifyPhoneNumberBackButton').hide();
                $('#closeErrorsforPhoneNumberChangeButton').click();
            });
        });

        function startTimer() {
            const timerElement = $('#timer');
            const resendButton = $('#resend-button');
            let timeLeft = 10; // 60 seconds timer
            updateTimer();
            function updateTimer() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    resendButton.css({ 'pointer-events': 'auto', 'opacity': '1' }); // Enable button
                    resendButton.removeClass('text-danger').addClass('text-success');
                    timerElement.text(''); // Remove timer text
                    $('.timer_text').text('');
                } else {
                    timerElement.text(timeLeft);
                    timeLeft -= 1;
                }
            }
        }

        function handleInput(currentField, nextFieldIndex) {
            if (currentField.value.length > 1) {
                // Allow only the last character if more than one digit is input
                currentField.value = currentField.value.slice(-1);
            }

            if (currentField.value.length === 1) {
                // Move to the next field
                const nextField = document.querySelectorAll('.codeConfirmationInputCell')[nextFieldIndex];
                if (nextField) {
                    nextField.focus();
                }
            }
            // Move to the previous field if the current field is cleared
            else if (currentField.value.length === 0) {
                const fields = document.querySelectorAll('.codeConfirmationInputCell');
                const currentIndex = Array.from(fields).indexOf(currentField);
                if (currentIndex > 0) {
                    const prevField = fields[currentIndex - 1];
                    if (prevField) {
                        prevField.focus();
                    }
                }
            }
        }

        function handleKeyDown(event, currentField, index) {
            const key = event.key;
            const fields = document.querySelectorAll('.codeConfirmationInputCell');

            if (key === 'ArrowRight') {
                // Move to the next field if right arrow is pressed
                if (index < fields.length - 1) {
                    fields[index + 1].focus();
                }
            } else if (key === 'ArrowLeft') {
                // Move to the previous field if left arrow is pressed
                if (index > 0) {
                    fields[index - 1].focus();
                }
            } else if (!isDigit(event)) {
                event.preventDefault();
            }
        }

        function isDigit(event) {
            const key = event.key;
            return (key >= '0' && key <= '9') || key === 'Backspace' || key === 'ArrowLeft' || key === 'ArrowRight';
        }
    </script>

    @* Update user email logic *@
    <script>
        $(function () {
            $('#updateEmailButton').on('click', function () {
                var newEmailValue = $('#newEmailField').val();

                $.ajax({
                    url: '@Url.Action("ChangeEmail", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', newEmail: newEmailValue },
                    success: function (response) {
                        if (response.success) {
                            $('#closeEmailUpdateButton').click();
                            $('#closeErrorsforEmailChangeButton').click();
                            $('#newEmailField').val('');

                            var toastEl = $('#testToast');
                            var toastMessage = $('#testToastMessage');
                            toastMessage.text(response.message);
                            var toast = new bootstrap.Toast(toastEl);
                            toast.show();
                        } else {
                            $('#emailChangeErrorContainer').show();
                            $('#emailChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#emailChangeErrorContainer').show();
                        $('#emailChangeErrorText').text(response.message);
                    }
                });
            });

            $('#closeEmailUpdateButton').on('click', function () {
                $('#emailChangeErrorContainer').hide();
                $('#newEmailField').val('');
            });

            $('#closeEmailUpdateCrossButton').on('click', function () {
                $('#emailChangeErrorContainer').hide();
                $('#newEmailField').val('');
            });
        });
    </script>

    @* Update user password logic *@
    <script>
        $(function () {
            $('#updatePasswordButton').on('click', function () {
                var currentPasswordValue = $('#currentPasswordField').val();
                var newPasswordValue = $('#newPasswordField').val();
                var confirmNewPasswordValue = $('#confirmNewPasswordField').val();

                $.ajax({
                    url: '@Url.Action("ChangePassword", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', currentPassword: currentPasswordValue, newPassword: newPasswordValue, confirmNewPassword: confirmNewPasswordValue },
                    success: function (response) {
                        if (response.success) {
                            $('#closePasswordChangeButton').click();
                            $('#closeErrorsButton').click();
                            $('#currentPasswordField').val('');
                            $('#newPasswordField').val('');
                            $('#confirmNewPasswordField').val('');

                            var toastEl = $('#testToast');
                            var toastMessage = $('#testToastMessage');
                            toastMessage.text(response.message);
                            var toast = new bootstrap.Toast(toastEl);
                            toast.show();
                        } else {
                            $('#passwordChangeErrorContainer').show();
                            $('#passwordChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#passwordChangeErrorContainer').show();
                        $('#passwordChangeErrorText').text(response.message);
                    }
                });
            });

            $('#closePasswordChangeButton').on('click', function () {
                $('#passwordChangeErrorContainer').hide();
                $('#currentPasswordField').val('');
                $('#newPasswordField').val('');
                $('#confirmNewPasswordField').val('');
            });

            $('#closePasswordChangeCrossButton').on('click', function () {
                $('#passwordChangeErrorCrossContainer').hide();
                $('#currentPasswordField').val('');
                $('#newPasswordField').val('');
                $('#confirmNewPasswordField').val('');
            });
        });
    </script>

    @* API to get a list of countries and cities *@
    <script>
        $(document).ready(function () {
            $.ajax({
                url: 'https://countriesnow.space/api/v0.1/countries',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.error === false) {
                        var sortedCountries = data.data.sort((a, b) => a.country.localeCompare(b.country));
                        sortedCountries.forEach(function (country) {
                            $('#country').append($('<option>', {
                                value: country.country,
                                text: country.country
                            }));
                        });
                    }
                },
                error: function () {
                    alert('Error retrieving countries. Please try again later.');
                }
            });
        });

        function updateCities(countryName) {
            $('#city').empty().append($('<option>', {
                text: 'Please select a city',
                disabled: true,
                selected: true
            }));

            $.ajax({
                url: 'https://countriesnow.space/api/v0.1/countries/cities',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({ country: countryName }),
                success: function (data) {
                    if (data.error === false) {
                        var sortedCities = data.data.sort((a, b) => a.localeCompare(b));
                        sortedCities.forEach(function (city) {
                            $('#city').append($('<option>', {
                                value: city,
                                text: city
                            }));
                        });
                    }
                },
                error: function () {
                    alert('Error retrieving cities. Please try again later.');
                }
            });
        }
    </script>
    
    @* Update "user location and education institution" fields *@
    <script>
        $(function () {
            $('#editUserInfoButton').on('click', function () {
                $('#userInfoContainer').hide();
                $('#userInfoEditContainer').show();
                $(this).hide();
                $('#EducationInstitutionEdit').val($('#educationalInstitutionText').text());

                var userCountry = '@Model.Country';
                var userCity = '@Model.City';
                $('#country').val(userCountry).change();

                var intervalID = setInterval(function () {
                    if (document.getElementById('city').length > 1) {
                        clearInterval(intervalID);
                        $('#city').val(userCity).change();
                    }
                }, 100);
            });

            $('#saveUserInfoButton').on('click', function () {
                var newCountryName = $('#country').val();
                var newCityName = $('#city').val();
                var newEducationalInstitutionName = $('#EducationInstitutionEdit').val();

                $.ajax({
                    url: '@Url.Action("UpdateLocationAndEducationalInstitutionInfo", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', country: newCountryName, city: newCityName, educationalInstitution: newEducationalInstitutionName },
                    success: function (response) {
                        if (response.success) {
                            $('#locationText').text(`${newCityName}, ${newCountryName}`);
                            $('#educationalInstitutionText').text(`${newEducationalInstitutionName}`);

                            $('#userInfoContainer').show();
                            $('#editUserInfoButton').show();
                            $('#userInfoEditContainer').hide();
                        } else {
                            alert('Failed to update first and last name: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Error updating description.');
                    }
                });
            });

            $('#cancelUserInfoButton').on('click', function () {
                $('#userInfoContainer').show();
                $('#editUserInfoButton').show();
                $('#userInfoEditContainer').hide();
            });
        });
    </script>

    @* Update "first and last name" fields *@
    <script>
        var newFirstName = $('#firstNameEdit').val();
        var newLastName = $('#lastNameEdit').val();

        $(function () {
            $('#editNameButton').on('click', function () {
                $('#nameDisplay').hide();
                $('#firstNameEditContainer').show();
                $('#lastNameEditContainer').show();

                if (newFirstName) {
                    $('#firstNameEdit').val(newFirstName);
                } else {
                    $('#firstNameEdit').val('@Model.FirstName');
                }

                if (newLastName) {
                    $('#lastNameEdit').val(newLastName);
                } else {
                    $('#lastNameEdit').val('@Model.LastName');
                }

                $('#saveNameButton').show();
                $('#cancelNameButton').show();
                $(this).hide();
            });

            $('#saveNameButton').on('click', function () {
                newFirstName = $('#firstNameEdit').val();
                newLastName = $('#lastNameEdit').val();

                $.ajax({
                    url: '@Url.Action("UpdateFirstAndLastName", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', firstName: newFirstName, lastName: newLastName },
                    success: function (response) {
                        if (response.success) {
                            $('#nameDisplay').text(`${newFirstName} ${newLastName}`).show();
                            $('#UserProfileLink').text(`${newFirstName} ${newLastName}`);
                            $('#firstNameEditContainer').hide();
                            $('#lastNameEditContainer').hide();
                            $('#editNameButton').show();
                            $('#saveNameButton').hide();
                            $('#cancelNameButton').hide();
                        } else {
                            alert('Failed to update first and last name: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Error updating description.');
                    }
                });
            });

            $('#cancelNameButton').on('click', function () {
                $('#nameDisplay').show();
                $('#firstNameEditContainer').hide();
                $('#lastNameEditContainer').hide();
                $('#editNameButton').show();
                $('#saveNameButton').hide();
                $('#cancelNameButton').hide();
            });
        });
    </script>

    @* Upload photo script *@
    <script>
        function submitForm() {
            document.getElementById('uploadForm').submit();
        }
    </script>
    
    @* Update "about me" field *@
    <script>
        $(function () {
            $('#editButton').on('click', function () {
                var descriptionHeight = $('#descriptionDisplay').height();
                $('#descriptionDisplay').hide();
                $('#descriptionEdit').val($('#descriptionDisplay').text()).show().height(descriptionHeight + 20);
                $('#saveButton').show();
                $('#cancelButton').show();
                $(this).hide();
            });

            $('#saveButton').on('click', function () {
                var newDescription = $('#descriptionEdit').val();
                $.ajax({
                    url: '@Url.Action("UpdateDescription", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', description: newDescription },
                    success: function (response) {
                        if (response.success) {
                            $('#descriptionDisplay').text(newDescription).show();
                            $('#descriptionEdit').hide();
                            $('#editButton').show();
                            $('#saveButton').hide();
                            $('#cancelButton').hide();
                        } else {
                            alert('Failed to update description: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Error updating description.');
                    }
                });
            });

            $('#cancelButton').on('click', function () {
                $('#descriptionDisplay').show();
                $('#descriptionEdit').hide();
                $('#editButton').show();
                $('#saveButton').hide();
                $('#cancelButton').hide();
            });
        });
    </script>
}

<style>
    .clickable-icon {
        cursor: pointer;
        transition: transform 0.3s ease-in-out;
    }

    .clickable-icon:hover {
        transform: scale(1.2);
    }
</style>

<style>
    .image-container {
        position: relative;
        cursor: pointer;
    }

    .image-container img {
        transition: opacity 0.3s ease-in-out;
        width: 100%;
    }

    .image-container:hover img {
        opacity: 0.5;
    }

    .image-container:hover .overlay {
        opacity: 1;
    }

    .image-container .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        color: white;
        font-size: 20px;
        opacity: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 0.3s ease-in-out;
    }
</style>