@model Presentation_Layer.ViewModels.Account.AccountDetailsViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Account"];
    var successNotification = TempData["SuccessNotification"] as string;
    var errorNotification = TempData["ErrorNotification"] as string;
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-7 col-lg-4 mb-5 mb-lg-0 wow fadeIn pb-4">
            <div class="card border-0 shadow" style="width: 400px;">
                <div class="user-profile-image-container">
                    @if (string.IsNullOrWhiteSpace(Model.ImagePath))
                    {
                        <img src="@Url.Content("~/images/default-user-photo.png")" alt='@Localizer["DefaultUserPhoto"]' class="user-photo" />
                    }
                    else
                    {
                        <img src="@Url.Content("~/images/" + System.IO.Path.GetFileName(Model.ImagePath))" alt="@Localizer["UserImage"]" />
                    }
                    <input type="hidden" name="userId" value="@Model.Id" />
                </div>
                
                @if (!Model.IsInReadonlyMode)
                {
                    <div class="row">
                        <div class="col">
                            <div class="d-grid justify-content-md-start me-2 mt-2" style="margin-bottom: -1rem; margin-left: 8px;">
                                <button type="button" class="btn btn-outline-primary" onclick="openUploadModal()">@Localizer["UploadNewPhoto"]</button>
                            </div>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(Model.ImagePath))
                        {
                            <div class="col">
                                <form asp-action="RemoveImage" asp-controller="Account" method="post">
                                    <input type="hidden" name="userId" value="@Model.Id" />
                                    <div class="d-grid justify-content-md-end me-2 mt-2" style="margin-bottom: -1rem;">
                                        <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#RemoveUserImage">
                                            @Localizer["RemoveImage"]
                                        </button>
                                    </div>
                                </form>
                            </div>
                        }
                    </div>
                }

                <div class="card-body p-1-9" style="padding: 2rem 2rem 1rem 2rem">
                    <div class="mb-4">
                        <div class="mb-1 wow fadeIn">
                            <div class="row">
                                <div class="col-11">
                                    <h3 id="nameDisplay" class="h4 mb-0">@Model.FirstName @Model.LastName</h3>
                                </div>
                                @if(!Model.IsInReadonlyMode){
                                    <div class="col-1">
                                        <i id="editNameButton" class="fas fa-pencil-alt display-25 clickable-icon" style="font-size:18px;margin-left: auto;"></i>
                                    </div>
                                }
                            </div>
                            @if (!Model.IsInReadonlyMode)
                            {
                                <div class="form-floating mb-3" style="display:none;" id="firstNameEditContainer">
                                    <input id="firstNameEdit" type="text" class="form-control" placeholder="First name" />
                                    <label for="firstNameEdit" class="form-label">@Localizer["FirstName"]</label>
                                </div>
                                <div class="form-floating mb-3" style="display:none;" id="lastNameEditContainer">
                                    <input id="lastNameEdit" type="text" class="form-control" placeholder="Last name" />
                                    <label for="lastNameEdit" class="form-label">@Localizer["LastName"]</label>
                                </div>
                                <div class="container">
                                    <div class="row">
                                        <div class="col">
                                            <button id="saveNameButton" class="btn btn-success" style="display:none; width: 100%;">@Localizer["SaveButton"]</button>
                                        </div>
                                        <div class="col">
                                            <button id="cancelNameButton" class="btn btn-warning" style="display:none; width: 100%;">@Localizer["CancelButton"]</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div id="userInfoContainer">
                        <div class="mb-1 wow fadeIn">
                            <div class="row">
                                <div class="col-11">
                                    <ul class="list-unstyled" style="margin-bottom: 0;">
                                        <li class="mb-3" title="@Localizer["Email"]">
                                            <i class="far fa-envelope display-25 me-3 text-secondary"></i>
                                            <span id="emailText">@Model.Email</span>
                                        </li>
                                        <li id="userLocationInfo" class="mb-3" title="@Localizer["Location"]">
                                            <i class="fas fa-map-marker-alt display-25 me-3 text-secondary"></i>
                                            @if (string.IsNullOrWhiteSpace(Model.City) && string.IsNullOrWhiteSpace(Model.Country))
                                            {
                                                <span id="locationText">@Localizer["CityNotSpecified"], @Localizer["CountryNotSpecified"]</span>
                                            }
                                            else if (string.IsNullOrWhiteSpace(Model.City) && !string.IsNullOrWhiteSpace(Model.Country))
                                            {
                                                <span id="locationText">@Model.City, @Localizer["CountryNotSpecified"]</span>
                                            }
                                            else if (!string.IsNullOrWhiteSpace(Model.City) && string.IsNullOrWhiteSpace(Model.Country))
                                            {
                                                <span id="locationText">@Localizer["CityNotSpecified"], @Model.Country</span>
                                            }
                                            else
                                            {
                                                <span id="locationText">@Model.City, @Model.Country</span>
                                            }
                                        </li>
                                        <li id="EducationInstitution" class="mb-3" title="@Localizer["EducationalInstitution"]">
                                            <i class="fas fa-university display-25 me-3 text-secondary"></i>
                                            @if (string.IsNullOrWhiteSpace(Model.EducationalInstitution))
                                            {
                                                <span id="educationalInstitutionText">@Localizer["Empty"]</span>
                                            }
                                            else
                                            {
                                                <span id="educationalInstitutionText">@Model.EducationalInstitution</span>
                                            }
                                        </li>
                                    </ul>
                                </div>
                                @if (!Model.IsInReadonlyMode)
                                {
                                    <div class="col-1">
                                        <i id="editUserInfoButton" class="fas fa-pencil-alt display-25 clickable-icon" style="font-size:18px;margin-left: auto;"></i>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    @* Update user info form *@
                    @if (!Model.IsInReadonlyMode)
                    {
                        <div id="userInfoEditContainer" style="display:none;">
                            <div class="mb-1 wow fadeIn">
                                <ul class="list-unstyled" style="margin-bottom: 0;">
                                    <li class="mb-3" title="@Localizer["Email"]">
                                        <i class="far fa-envelope display-25 me-3 text-secondary"></i>
                                        @Model.Email
                                    </li>
                                    <li class="mb-3" title="@Localizer["Location"]">
                                        <div class="row">
                                            <div class="col-1">
                                                <i class="fas fa-map-marker-alt display-25 me-3 text-secondary"></i>
                                            </div>
                                            <div class="col">
                                                <select id="country" name="country" onchange="updateCities(this.value)" class="form-select">
                                                    <option value="" selected disabled>@Localizer["PleaseSelectCountry"]</option>
                                                </select>
                                            </div>
                                            <div class="col">
                                                <select id="city" name="city" class="form-select">
                                                    <option value="" selected disabled>@Localizer["PleaseSelectCity"]</option>
                                                </select>
                                            </div>
                                        </div>
                                    </li>
                                    <li title="@Localizer["EducationalInstitution"]">
                                        <div class="row">
                                            <div class="col-1">
                                                <i class="fas fa-university display-25 me-3 text-secondary"></i>
                                            </div>
                                            <div class="col-11">
                                                <div class="form-floating mb-3" id="EducationInstitutionEditContainer">
                                                    <input id="EducationInstitutionEdit" type="text" class="form-control" placeholder="@Localizer["EducationalInstitution"]" />
                                                    <label for="EducationInstitutionEdit" class="form-label">@Localizer["EducationalInstitution"]</label>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                                <div class="container">
                                    <div class="row">
                                        <div class="col">
                                            <button id="saveUserInfoButton" class="btn btn-success" style="width: 100%;">@Localizer["SaveButton"]</button>
                                        </div>
                                        <div class="col">
                                            <button id="cancelUserInfoButton" class="btn btn-warning" style="width: 100%;">@Localizer["CancelButton"]</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="container">
                            <div class="row mb-1">
                                <button type="button" class="link-button" data-bs-toggle="modal" data-bs-target="#passwordChangeModal">
                                    @Localizer["ChangePassword"]
                                </button>
                            </div>
                            <div class="row">
                                <button type="button" class="link-button" data-bs-toggle="modal" data-bs-target="#emailChangeModal">
                                    @Localizer["ChangeEmail"]
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="ps-lg-1-6 ps-xl-5" style="height: 100%;">
                <div class="mb-1 wow fadeIn">
                    <div class="text-start mb-1-6 wow fadeIn">
                        <div class="d-flex flex-md-row flex-column align-items-center">
                            @if (!Model.IsInReadonlyMode || !string.IsNullOrWhiteSpace(Model.AboutUser))
                            {
                                <h2 class="display-4">@Localizer["AboutMe"]</h2>
                            }
                            @if (!Model.IsInReadonlyMode)
                            {
                                <i id="editButton" class="fas fa-pencil-alt display-25 ms-3 me-3 clickable-icon" style="font-size:18px; align-content: center"></i>
                            }
                        </div>
                    </div>
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <pre id="descriptionDisplay" style="white-space: pre-wrap;">@Model.AboutUser</pre>
                            </div>
                        </div>
                    </div>
                    @if (!Model.IsInReadonlyMode)
                    {
                        <textarea class="form-control mb-2" id="descriptionEdit" rows="4" style="display:none;"></textarea>
                        <button id="saveButton" style="display:none;" class="btn btn-success">@Localizer["SaveButton"]</button>
                        <button id="cancelButton" style="display:none;" class="btn btn-warning">@Localizer["CancelButton"]</button>
                    }
                </div>
                @if (!User.IsInRole(RoleNames.Admin))
                {
                    <div class="mb-5 wow fadeIn" style="height: 60%;">
                        <div class="text-start mb-1-6 wow fadeIn">
                            <h2 class="display-4">@Localizer["Courses"]</h2>
                        </div>
                        <div class="row mt-n4" style="width: 98%; height: 100%;">
                            @for(var i = 0; i < Model.Courses.Count; i++)
                            {
                                <div class="col-sm-6 col-xl-4 mt-4">
                                    <div class="card text-center border-0 rounded-3">
                                        <div class="card-body">
                                            <i class="ti-bookmark-alt icon-box medium rounded-3 mb-4"></i>
                                            <h3 class="h5 mb-3">@Html.ActionLink(Model.Courses[i].Name, "Details", "Course", new { id = Model.Courses[i].Id }, new { style = "text-decoration: none; color: black;" })</h3>
                                        </div>
                                    </div>
                                </div>

                                if (Model.Courses.Count > 6 && i == 4 && !Model.IsInReadonlyMode)
                                {
                                    <div class="col-sm-6 col-xl-4 mt-4">
                                        <div class="card text-center border-0 rounded-3" style="height: 60%;">
                                            <div class="card-body d-flex justify-content-center align-items-center">
                                                <a asp-controller="Course" asp-action="Applied">
                                                    <h3 class="h5 mb-3">@Localizer["SeeAllCourses"]</h3>
                                                </a>
                                            </div>
                                        </div>
                                    </div>

                                    break;
                                }
                            }
                            @if (Model.Courses.Count == 0)
                            {
                                <h1 class="display-4" style="text-align: center; display: flex;justify-content: center;align-items: center;height: 100%;">
                                    @Localizer["NoAppliedCourses"]
                                </h1>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal for Uploading Photo -->
<div id="uploadModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["UploadNewPhoto"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Drag-and-drop area or select file -->
                <div id="dropZone" class="drop-zone" onclick="document.getElementById('fileUploadModal').click();">
                    <p id="dropZoneText" style="margin: 0;">@Localizer["ClickToSelectPhoto"]</p>
                </div>
                <!-- Hidden input to pass the userId -->
                <input type="hidden" id="userId" value="@Model.Id" />
            </div>
            <div class="modal-footer" style="display: flex; justify-content: center;">
                <input type="file" id="fileUploadModal" name="file" style="display: none" onchange="updateDropZone(this)" />
                <button type="button" class="btn btn-primary" onclick="uploadPhoto()">@Localizer["Upload"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    @if (!string.IsNullOrEmpty(successNotification))
    {
        <div class="toast bg-success text-white show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
                <div class="d-flex gap-4">
                    <span><i class="fa fa-check-circle fa-lg"></i></span>
                    <div class="d-flex flex-grow-1 align-items-center">
                        <span class="fw-semibold">@successNotification</span>
                        <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorNotification))
    {
        <div class="toast bg-danger text-white show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
                <div class="d-flex gap-4">
                    <span><i class="fa fa-exclamation-circle fa-lg"></i></span>
                    <div class="d-flex flex-grow-1 align-items-center">
                        <span class="fw-semibold">@errorNotification</span>
                        <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal for password change-->
<div class="modal fade" id="passwordChangeModal" tabindex="-1" aria-labelledby="passwordChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="passwordChangeModalLabel">@Localizer["PasswordChange"]</h1>
                <button id="closePasswordChangeCrossButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-floating mb-3">
                    <input id="currentPasswordField" type="password" class="form-control" placeholder="@Localizer["CurrentPassword"]" />
                    <label for="currentPasswordField" class="form-label">@Localizer["CurrentPassword"]</label>
                </div>
                    
                <div class="form-floating mb-3">
                    <input id="newPasswordField" type="password" class="form-control" placeholder="@Localizer["NewPassword"]" />
                    <label for="newPasswordField" class="form-label">@Localizer["NewPassword"]</label>
                </div>
                    
                <div class="form-floating">
                    <input id="confirmNewPasswordField" type="password" class="form-control" placeholder="@Localizer["ConfirmNewPassword"]" />
                    <label for="confirmNewPasswordField" class="form-label">@Localizer["ConfirmNewPassword"]</label>
                </div>
                <div id="passwordChangeErrorContainer" style="display: none;">
                    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show mt-3" style="margin-bottom: 0">
                        <i class="bi-exclamation-octagon-fill" style="font-size: 1.5em; line-height: 1;"></i>
                        <strong class="mx-2">@Localizer["Error"]</strong>
                        <pre id="passwordChangeErrorText" style="margin-bottom: 0; white-space: pre-wrap;"></pre>
                        <button id="closeErrorsButton" type="button" class="btn-close"></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="closePasswordChangeButton" type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["CancelButton"]</button>
                <button id="updatePasswordButton" type="button" class="btn btn-primary">@Localizer["SaveButton"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for email change-->
<div class="modal fade" id="emailChangeModal" tabindex="-1" aria-labelledby="emailChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="emailChangeModalLabel">@Localizer["EmailChange"]</h1>
                <button id="closeEmailUpdateCrossButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-floating">
                    <input id="newEmailField" type="email" class="form-control" placeholder="@Localizer["NewEmail"]" />
                    <label for="newEmailField" class="form-label">@Localizer["NewEmail"]</label>
                </div>
                <div id="emailChangeErrorContainer" style="display: none;">
                    <div class="alert alert-danger alert-dismissible d-flex align-items-center fade show mt-3" style="margin-bottom: 0">
                        <i class="bi-exclamation-octagon-fill" style="font-size: 1.5em; line-height: 1;"></i>
                        <strong class="mx-2">@Localizer["Error"]</strong>
                        <pre id="emailChangeErrorText" style="margin-bottom: 0; white-space: pre-wrap;"></pre>
                        <button id="closeErrorsforEmailChangeButton" type="button" class="btn-close"></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="closeEmailUpdateButton" type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["CancelButton"]</button>
                <button id="updateEmailButton" type="button" class="btn btn-primary">@Localizer["SendConfirmationEmail"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification message -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="testToast" class="toast bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
            <div class="d-flex gap-4">
                <span> <i class="fa fa-check-circle fa-lg"></i></span>
                <div class="d-flex flex-grow-1 align-items-center">
                    <span class="fw-semibold" id="testToastMessage" style="font-size: initial;"></span>
                </div>
                <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

<form asp-action="RemoveImage" asp-controller="Account" method="post">
    <input type="hidden" name="userId" value="@Model.Id" />
    @await Html.PartialAsync("_DeleteConfirmationModal", ("RemoveUserImage", @Localizer["YourPhoto"].Value))
</form>

@section Scripts {

    <script>
        // Store the selected file
        let selectedFile = null;

        // Update drop zone text and store the file when selected via input or drag-and-drop
        function updateDropZone(input) {
            const file = input.files[0];
            const dropZoneText = document.getElementById('dropZoneText');

            if (file) {
                selectedFile = file;
                dropZoneText.textContent = '@Localizer["FileSelected"]' + ` ${file.name}`;
            } else {
                dropZoneText.textContent = '@Localizer["ClickToSelectPhoto"]';
            }
        }

        // Handle file drop and store the file
        function dropHandler(event) {
            event.preventDefault();  // Prevent default behavior (e.g., opening the file)
            const file = event.dataTransfer.files[0];
            const input = document.getElementById('fileUploadModal');
            const dropZoneText = document.getElementById('dropZoneText');

            if (file) {
                selectedFile = file;
                dropZoneText.textContent = '@Localizer["FileSelected"]' + ` ${file.name}`;
                input.files = event.dataTransfer.files;  // Assign the dropped file to the input (not used here)
            }
        }

        // Prevent default dragover behavior
        function dragOverHandler(event) {
            event.preventDefault();  // Prevent default to allow drop
        }

        // Upload photo function that sends the file using Fetch API
        function uploadPhoto() {
            const userId = document.getElementById('userId').value;

            if (!selectedFile) {
                alert('@Localizer["PleaseSelectPhotoBeforeUploading"]');
                return;
            }

            // Create a FormData object to send the file
            const formData = new FormData();
            formData.append('file', selectedFile);
            formData.append('userId', userId);

            // Send the request using Fetch API
            fetch('/Account/UpdateImage', {
                method: 'POST',
                body: formData
            })
                .then(data => {
                    location.reload();
                })
        }
    </script>

    <script>
        function openUploadModal() {
            $('#uploadModal').modal('show');
        }

        function submitForm() {
            // You can add validation here if necessary before submitting the form
            document.getElementById('uploadForm').submit();
        }

        function dropHandler(event) {
            event.preventDefault();
            const files = event.dataTransfer.files;
            document.getElementById('fileUploadModal').files = files;
            submitForm();
        }

        function dragOverHandler(event) {
            event.preventDefault();
        }

    </script>

    @* Update user email logic *@
    <script>
            $('#updateEmailButton').on('click', function () {
                var newEmailValue = $('#newEmailField').val();

                // Validate new email
                $.ajax({
                    url: '@Url.Action("ChangeEmailValidation", "Account")',
                    type: 'POST',
                    data: { newEmail: newEmailValue },
                    success: function (response) {
                        if (response.success) {
                            $('#closeEmailUpdateButton').click();
                            $('#closeErrorsforEmailChangeButton').click();
                            $('#newEmailField').val('');
                            var toastEl = $('#testToast');
                            var toastMessage = $('#testToastMessage');
                            toastMessage.text(response.message);
                            var toast = new bootstrap.Toast(toastEl);
                            toast.show();

                            $.ajax({
                                url: '@Url.Action("ChangeEmail", "Account")',
                                type: 'POST',
                                data: { userId: '@Model.Id', newEmail: newEmailValue }
                            });
                        }
                        else{
                            $('#emailChangeErrorContainer').show();
                            $('#emailChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#emailChangeErrorContainer').show();
                        $('#emailChangeErrorText').text(response.message);
                    }
                });
            });
    </script>

    @* Update user password logic *@
    <script>
        $(function () {
            $('#updatePasswordButton').on('click', function () {
                var currentPasswordValue = $('#currentPasswordField').val();
                var newPasswordValue = $('#newPasswordField').val();
                var confirmNewPasswordValue = $('#confirmNewPasswordField').val();

                $.ajax({
                    url: '@Url.Action("ChangePassword", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', currentPassword: currentPasswordValue, newPassword: newPasswordValue, confirmNewPassword: confirmNewPasswordValue },
                    success: function (response) {
                        if (response.success) {
                            $('#closePasswordChangeButton').click();
                            $('#closeErrorsButton').click();
                            $('#currentPasswordField').val('');
                            $('#newPasswordField').val('');
                            $('#confirmNewPasswordField').val('');

                            var toastEl = $('#testToast');
                            var toastMessage = $('#testToastMessage');
                            toastMessage.text(response.message);
                            var toast = new bootstrap.Toast(toastEl);
                            toast.show();
                        } else {
                            $('#passwordChangeErrorContainer').show();
                            $('#passwordChangeErrorText').text(response.message);
                        }
                    },
                    error: function (error) {
                        $('#passwordChangeErrorContainer').show();
                        $('#passwordChangeErrorText').text(response.message);
                    }
                });
            });

            $('#closePasswordChangeButton').on('click', function () {
                $('#passwordChangeErrorContainer').hide();
                $('#currentPasswordField').val('');
                $('#newPasswordField').val('');
                $('#confirmNewPasswordField').val('');
            });

            $('#closePasswordChangeCrossButton').on('click', function () {
                $('#passwordChangeErrorCrossContainer').hide();
                $('#currentPasswordField').val('');
                $('#newPasswordField').val('');
                $('#confirmNewPasswordField').val('');
            });
        });
    </script>

    @* API to get a list of countries and cities *@
    <script>
        $(document).ready(function () {
            $.ajax({
                url: 'https://countriesnow.space/api/v0.1/countries',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.error === false) {
                        var sortedCountries = data.data.sort((a, b) => a.country.localeCompare(b.country));
                        sortedCountries.forEach(function (country) {
                            $('#country').append($('<option>', {
                                value: country.country,
                                text: country.country
                            }));
                        });
                    }
                }
            });
        });

        function updateCities(countryName) {
            $('#city').empty().append($('<option>', {
                text: '@Localizer["PleaseSelectCity"]',
                disabled: true,
                selected: true
            }));

            $.ajax({
                url: 'https://countriesnow.space/api/v0.1/countries/cities',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({ country: countryName }),
                success: function (data) {
                    if (data.error === false) {
                        var sortedCities = data.data.sort((a, b) => a.localeCompare(b));
                        sortedCities.forEach(function (city) {
                            $('#city').append($('<option>', {
                                value: city,
                                text: city
                            }));
                        });
                    }
                }
            });
        }
    </script>
    
    @* Update "user location and education institution" fields *@
    <script>
        $(function () {
            $('#editUserInfoButton').on('click', function () {
                $('#userInfoContainer').hide();
                $('#userInfoEditContainer').show();
                $(this).hide();
                debugger;
                let educationInstitutionValue = $('#educationalInstitutionText').text();
                if (educationInstitutionValue === "@Localizer["Empty"]") {
                    educationInstitutionValue = null;
                }
                $('#EducationInstitutionEdit').val(educationInstitutionValue);

                var userCountry = '@Model.Country';
                var userCity = '@Model.City';
                if (userCountry){
                    $('#country').val(userCountry).change();
                }

                if (userCity){
                    var intervalID = setInterval(function () {
                        if (document.getElementById('city').length > 1) {
                            clearInterval(intervalID);
                            $('#city').val(userCity).change();
                        }
                    }, 100);
                }
            });

            $('#saveUserInfoButton').on('click', function () {
                var newCountryName = $('#country').val();
                var newCityName = $('#city').val();
                var newEducationalInstitutionName = $('#EducationInstitutionEdit').val();

                $.ajax({
                    url: '@Url.Action("UpdateLocationAndEducationalInstitutionInfo", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', country: newCountryName, city: newCityName, educationalInstitution: newEducationalInstitutionName },
                    success: function (response) {
                        if (response.success) {
                            if (!newCityName || newCityName.trim() === "") {
                                newCityName = "@Localizer["CityNotSpecified"]";  // Assign a new value
                            }

                            if (!newCountryName || newCountryName.trim() === "") {
                                newCountryName = "@Localizer["CountryNotSpecified"]";  // Assign a new value
                            }

                            $('#locationText').text(`${newCityName}, ${newCountryName}`);
                            if (!newEducationalInstitutionName){
                                newEducationalInstitutionName = "@Localizer["Empty"]";
                            }

                            $('#educationalInstitutionText').text(`${newEducationalInstitutionName}`);
                            
                            $('#userInfoContainer').show();
                            $('#editUserInfoButton').show();
                            $('#userInfoEditContainer').hide();
                        }
                    }
                });
            });

            $('#cancelUserInfoButton').on('click', function () {
                $('#userInfoContainer').show();
                $('#editUserInfoButton').show();
                $('#userInfoEditContainer').hide();
            });
        });
    </script>

    @* Update "first and last name" fields *@
    <script>
        var newFirstName = $('#firstNameEdit').val();
        var newLastName = $('#lastNameEdit').val();

        $(function () {
            $('#editNameButton').on('click', function () {
                $('#nameDisplay').hide();
                $('#firstNameEditContainer').show();
                $('#lastNameEditContainer').show();

                if (newFirstName) {
                    $('#firstNameEdit').val(newFirstName);
                } else {
                    $('#firstNameEdit').val('@Model.FirstName');
                }

                if (newLastName) {
                    $('#lastNameEdit').val(newLastName);
                } else {
                    $('#lastNameEdit').val('@Model.LastName');
                }

                $('#saveNameButton').show();
                $('#cancelNameButton').show();
                $(this).hide();
            });

            $('#saveNameButton').on('click', function () {
                newFirstName = $('#firstNameEdit').val();
                newLastName = $('#lastNameEdit').val();

                if (!newFirstName || !newLastName){
                    alert("@Localizer["NameShouldNotBeEmpty"]");
                    return;
                }

                $.ajax({
                    url: '@Url.Action("UpdateFirstAndLastName", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', firstName: newFirstName, lastName: newLastName },
                    success: function (response) {
                        if (response.success) {
                            $('#nameDisplay').text(`${newFirstName} ${newLastName}`).show();
                            $('#UserProfileLink').text(`${newFirstName} ${newLastName}`);
                            $('#firstNameEditContainer').hide();
                            $('#lastNameEditContainer').hide();
                            $('#editNameButton').show();
                            $('#saveNameButton').hide();
                            $('#cancelNameButton').hide();
                        }
                    }
                });
            });

            $('#cancelNameButton').on('click', function () {
                $('#nameDisplay').show();
                $('#firstNameEditContainer').hide();
                $('#lastNameEditContainer').hide();
                $('#editNameButton').show();
                $('#saveNameButton').hide();
                $('#cancelNameButton').hide();
            });
        });
    </script>

    @* Upload photo script *@
    <script>
        function submitForm() {
            document.getElementById('uploadForm').submit();
        }
    </script>
    
    @* Update "about me" field *@
    <script>
        $(function () {
            $('#editButton').on('click', function () {
                var descriptionHeight = $('#descriptionDisplay').height();
                $('#descriptionDisplay').hide();
                $('#descriptionEdit').val($('#descriptionDisplay').text()).show().height(descriptionHeight + 20);
                $('#saveButton').show();
                $('#cancelButton').show();
                $(this).hide();
            });

            $('#saveButton').on('click', function () {
                var newDescription = $('#descriptionEdit').val();
                $.ajax({
                    url: '@Url.Action("UpdateDescription", "Account")',
                    type: 'POST',
                    data: { userId: '@Model.Id', description: newDescription },
                    success: function (response) {
                        if (response.success) {
                            $('#descriptionDisplay').text(newDescription).show();
                            $('#descriptionEdit').hide();
                            $('#editButton').show();
                            $('#saveButton').hide();
                            $('#cancelButton').hide();
                        }
                    }
                });
            });

            $('#cancelButton').on('click', function () {
                $('#descriptionDisplay').show();
                $('#descriptionEdit').hide();
                $('#editButton').show();
                $('#saveButton').hide();
                $('#cancelButton').hide();
            });
        });
    </script>
}