@model List<Presentation_Layer.ViewModels.UserExamAttemptViewModel>

@{
    ViewData["Title"] = "ExamStatistic";
    var orderedByGradeFromMaxToMin = Model.OrderByDescending(x => x.TotalGrade).ToList();
    var orderedByGradeFromMinToMax = Model.OrderBy(x => x.TotalGrade).ToList();

    var examMaxGrade = Model[0].Exam.Questions.Sum(q => q.MaxGrade).Value;
    int categoryCount;
    if (examMaxGrade <= 5)
    {
        categoryCount = 2;
    }
    else if (examMaxGrade <= 15)
    {
        categoryCount = 5;
    }
    else if (examMaxGrade <= 30)
    {
        categoryCount = 6;
    }
    else if (examMaxGrade <= 45)
    {
        categoryCount = 7;
    }
    else if (examMaxGrade <= 60)
    {
        categoryCount = 8;
    }
    else
    {
        categoryCount = 10;
    }

    var categoryStep = (int)Math.Ceiling((float)examMaxGrade / categoryCount);

    var categories = Enumerable.Range(0, categoryCount)
        .Select(n => n == categoryCount - 1 
            ? $"{n * categoryStep}-{examMaxGrade}"
            : $"{n * categoryStep}-{(n + 1) * categoryStep - 1}")
        .ToList();

    var counts = new int[categoryCount];

    foreach (var student in Model)
    {
        var categoryIndex = student.TotalGrade / categoryStep;
        counts[categoryIndex.Value]++;
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>

    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        text-align: center;
        color: white;
    }

    .image-container {
        width: calc(100% + 24px);
        position: relative;
        overflow: hidden;
        margin-left: -12px;
        margin-right: -12px;
        margin-top: -16px;
    }

    .image-container img {
        filter: brightness(50%);
        width: 100vw;
        height: auto;
        object-fit: cover;
    }

    .straddle-button {
        position: absolute;
        left: 92%;
        transform: translateX(-50%);
        bottom: 5%;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 1.5vw;
        width: max-content;
        border-radius: 35px;
    }

    .card {
        box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
    }

    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0,0,0,.125);
        border-radius: 1rem;
    }

    .bg-c-blue {
        background: linear-gradient(45deg,#4099ff,#73b4ff);
    }

    .bg-c-green {
        background: linear-gradient(45deg,#2ed8b6,#59e0c5);
    }

    .bg-c-yellow {
        background: linear-gradient(45deg,#FFB64D,#ffcb80);
    }

    .bg-c-pink {
        background: linear-gradient(45deg,#FF5370,#ff869a);
    }

    .bg-c-purple {
        background: linear-gradient(45deg, #9b59b6, #be90d4);
    }

    .bg-c-red {
        background: linear-gradient(45deg, #e74c3c, #f1948a);
    }

    .bg-c-orange {
        background: linear-gradient(45deg, #f39c12, #f9c6c9);
    }

    .bg-c-teal {
        background: linear-gradient(45deg, #1abc9c, #48c9b0);
    }

    .bg-c-indigo {
        background: linear-gradient(45deg, #34495e, #5d6d7e);
    }

    .bg-c-gray {
        background: linear-gradient(45deg, #7f8c8d, #bdc3c7);
    }

    .bg-c-brown {
        background: linear-gradient(45deg, #8e44ad, #a569bd);
    }

    .bg-c-cyan {
        background: linear-gradient(45deg, #00bcd4, #4dd0e1);
    }
</style>

<div class="container-fluid" style="padding: 0;">
    <div class="decor-default">
        <div class="contact">
            <div class="controls">
                <div class="image-container">
                    <img src="/images/banners/banner-8.jpg">
                    <div class="centered">
                        <h1 class="display-1" style="font-size: 6vw; font-weight: 400;">
                            Exam statistic
                        </h1>
                    </div>
                </div>
            </div>

            <div class="container">
                <div class="row mb-5 mt-5">
                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-blue order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">Passed exams</h2>
                                <h3 class="text-center"><span>@Model.Count students</span></h3>
                            </div>
                        </div>
                    </div>

                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-pink order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">Min grade</h2>
                                <h3 class="text-center"><span>@Model.Min(s => s.TotalGrade)</span></h3>
                            </div>
                        </div>
                    </div>

                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-green order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">Max grade</h2>
                                <h3 class="text-center"><span>@Model.Max(s => s.TotalGrade)</span></h3>
                            </div>
                        </div>
                    </div>

                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-purple order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">Average grade</h2>
                                <h3 class="text-center"><span>@Model.Average(s => s.TotalGrade)</span></h3>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card ccard radius-t-0 h-100">
                            <div class="card-header pb-3 brc-secondary-l3">
                                <h5 class="card-title mb-2 mb-md-0 text-dark-m3">
                                    Top 5 students with best grades
                                </h5>
                            </div>
                            @for (var i = 0; i < Model.Count; i++)
                            {
                                <div class="card-body d-flex justify-content-between" style="background-color: #f2f4f6; margin: 10px; border-radius: 10px;">
                                    <span>
                                        @(i + 1). @orderedByGradeFromMaxToMin[i].User.FirstName @orderedByGradeFromMaxToMin[i].User.LastName
                                    </span>

                                    <span>
                                        @orderedByGradeFromMaxToMin[i].TotalGrade/@orderedByGradeFromMaxToMin[i].Exam.Questions.Sum(q => q.MaxGrade)
                                    </span>
                                </div>

                                @if (i == 4)
                                {
                                    break;
                                }
                            }
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card ccard radius-t-0 h-100">

                            <div class="card-header pb-3 brc-secondary-l3">
                                <h5 class="card-title mb-2 mb-md-0 text-dark-m3">
                                    Top 5 students with worse grades
                                </h5>
                            </div>

                            @for (var i = 0; i < Model.Count; i++)
                            {
                                <div class="card-body d-flex justify-content-between" style="background-color: #f2f4f6; margin: 10px; border-radius: 10px;">
                                    <span>
                                        @(i + 1). @orderedByGradeFromMinToMax[i].User.FirstName @orderedByGradeFromMinToMax[i].User.LastName
                                    </span>

                                    <span>
                                        @orderedByGradeFromMinToMax[i].TotalGrade/@orderedByGradeFromMinToMax[i].Exam.Questions.Sum(q => q.MaxGrade)
                                    </span>
                                </div>

                                @if (i == 4)
                                {
                                    break;
                                }
                            }
                        </div>
                    </div>
                </div>

                <div class="row mt-5 mb-5">
                    <div class="col-md-6 d-flex align-items-center justify-content-center" style="height: 50vh;">
                        <canvas id="doughnutChart"></canvas>
                    </div>
                    <div class="col-md-6 d-flex align-items-center justify-content-center">
                        <canvas id="categoriesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var ctx = document.getElementById('categoriesChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(categories)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(counts)),
                backgroundColor: 'rgba(75, 192, 192, 0.5)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Grade'
                    },
                    beginAtZero: true
                },
                y: {
                    title: {
                        display: true,
                        text: 'Number of Students'
                    },
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    },
                }
            },
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
</script>

<script>
    var ctx = document.getElementById('doughnutChart').getContext('2d');

    var myChart = new Chart(ctx, {
       type: 'doughnut',
       data: {
           labels: ['Passed', 'Failed'],
           datasets: [{
                data: [@Model.Count(s => s.TotalGrade >= s.Exam.MinimumPassGrade), @Model.Count(s => s.TotalGrade < s.Exam.MinimumPassGrade)],
               backgroundColor: [
                   'rgba(75, 192, 192, 0.2)',
                   'rgba(255, 99, 132, 0.2)'
               ],
               borderColor: [
                   'rgba(75, 192, 192, 1)',
                   'rgba(255, 99, 132, 1)'
               ],
               borderWidth: 1
           }]
       },
        options: {
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
</script>