@model Presentation_Layer.ViewModels.Exam.ExamStatisticViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["ExamStatistic"];
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid" style="padding: 0;">
    <div class="decor-default">
        <div class="contact">
            <div class="controls">
                <div class="image-container">
                    <img src="/images/banners/banner-5.jpg">
                    <div class="centered">
                        <h1 class="display-1" style="font-size: 6vw; font-weight: 400;">
                            @Localizer["ExamStatistic"]
                        </h1>
                    </div>
                </div>
            </div>

            <div class="container">
                <div class="row mb-5 mt-5">
                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-blue order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">@Localizer["StudentsPassed"]</h2>
                                <h3 class="text-center"><span>@Model.ExamTakerCount</span></h3>
                            </div>
                        </div>
                    </div>

                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-pink order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">@Localizer["AverageTimeToComplete"]</h2>
                                @if (Model.IsExamTakenByStudents)
                                {
                                    <h3 class="text-center">
                                        <span>@Model.AverageTimeSpentToCompleteExam.ToString(@"hh\:mm\:ss")</span>
                                    </h3>
                                }
                                else
                                {
                                    <h3 class="text-center"><span>@TimeSpan.Zero</span></h3>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col d-flex align-items-stretch">
                        <div class="card bg-c-purple order-card flex-fill">
                            <div class="card-body">
                                <h2 class="m-b-20 text-center">@Localizer["AverageGrade"]</h2>
                                @if (Model.IsExamTakenByStudents)
                                {
                                    <h3 class="text-center"><span>@Math.Round(Model.ExamTakerAverageGrade, 2)</span></h3>
                                }
                                else
                                {
                                    <h3 class="text-center"><span>0</span></h3>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                @if (Model.IsExamHasAssessedUserAttempts)
                {
                    <div class="row justify-content-center">
                        <div class="col-md-6">
                            <div class="card ccard radius-t-0 h-100">
                                <div class="card-header pb-3 brc-secondary-l3">
                                    <h5 class="card-title mb-2 mb-md-0 text-dark-m3">
                                        @Localizer["TopStudentsWithBestGrades"]
                                    </h5>
                                </div>
                                @for (var i = 0; i < Model.AssessedUserAttemptsFromMaxToMinGrade.Count; i++)
                                {
                                    <div class="card-body d-flex justify-content-between" style="background-color: #f2f4f6; margin: 10px; border-radius: 10px;">
                                        <span>
                                            @(i + 1). @Model.AssessedUserAttemptsFromMaxToMinGrade[i].UserFirstName @Model.AssessedUserAttemptsFromMaxToMinGrade[i].UserLastName
                                        </span>

                                        <span>
                                            @Model.AssessedUserAttemptsFromMaxToMinGrade[i].TotalGrade/@Model.MaxPossibleExamGrade
                                        </span>
                                    </div>

                                    @if (i == 4)
                                    {
                                        break;
                                    }
                                }
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="card ccard radius-t-0 h-100">

                                <div class="card-header pb-3 brc-secondary-l3">
                                    <h5 class="card-title mb-2 mb-md-0 text-dark-m3">
                                        @Localizer["TopStudentsWithWorseGrades"]
                                    </h5>
                                </div>

                                @for (var i = 0; i < Model.AssessedUserAttemptsFromMinToMaxGrade.Count; i++)
                                {
                                    <div class="card-body d-flex justify-content-between" style="background-color: #f2f4f6; margin: 10px; border-radius: 10px;">
                                        <span>
                                            @(i + 1). @Model.AssessedUserAttemptsFromMinToMaxGrade[i].UserFirstName @Model.AssessedUserAttemptsFromMinToMaxGrade[i].UserLastName
                                        </span>

                                        <span>
                                            @Model.AssessedUserAttemptsFromMinToMaxGrade[i].TotalGrade/@Model.MaxPossibleExamGrade
                                        </span>
                                    </div>

                                    @if (i == 4)
                                    {
                                        break;
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
                
                @if (!Model.IsExamHasAssessedUserAttempts)
                {
                    <div class="text-center mb-5">
                        <h1 class="display-1">
                            @Localizer["ThereIsNoAssessedExamsYet"]
                        </h1>
                    </div>
                }

                @if (Model.IsExamHasAssessedUserAttempts)
                {
                    <div class="row">
                        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center  mb-5 mt-5" style="height: 50vh;">
                            <h5 class="text-center">@Localizer["PassedNotPassed"]</h5>
                            <canvas id="passedNotPasssedDoughnutChart"></canvas>
                        </div>
                        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center  mb-5 mt-5" style="height: 50vh;">
                            <h5 class="text-center">@Localizer["CheckedManuallyWithAI"]</h5>
                            <canvas id="checkedManuallyOrWithAIDoughnutChart"></canvas>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 justify-content-center d-block mx-auto mb-5">
                            <h5 class="text-center">@Localizer["GradeDistributionOfStudents"]</h5>
                            <canvas id="gradeWithNumberOfStudentsCategoriesChart"></canvas>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        var ctx = document.getElementById('passedNotPasssedDoughnutChart').getContext('2d');

        var myChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['@Localizer["Passed"]', '@Localizer["Failed"]', '@Localizer["WithNoAssessedAttempts"]'],
                datasets: [{
                    data: [
                        @Model.PassedExamNumberOfUsers,
                        @Model.FailedExamNumberOfUsers,
                        @Model.NumberOfUsersWithNoneOfCheckedAttempts
                    ],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(128, 128, 128, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(128, 128, 128, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    </script>

    <script>
        var ctx = document.getElementById('checkedManuallyOrWithAIDoughnutChart').getContext('2d');

        var myChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['@Localizer["CheckedByAI"]', '@Localizer["CheckedManually"]', '@Localizer["NotAssessed"]'],
                datasets: [{
                    data: [
                        @Model.ExamAssessedByAiNumberOfUserAttempts,
                        @Model.ExamAssessedManuallyNumberOfUserAttempts,
                        @Model.WaitingForAssessmentNumberOfUserAttempts
                        ],
                    backgroundColor: [
                        'rgba(76, 175, 80, 0.2)',
                        'rgba(33, 150, 243, 0.2)',
                        'rgba(128, 128, 128, 0.2)'
                    ],
                    borderColor: [
                        'rgba(76, 175, 80, 1)',
                        'rgba(33, 150, 243, 1)',
                        'rgba(128, 128, 128, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    </script>

    <script>
        var ctx = document.getElementById('gradeWithNumberOfStudentsCategoriesChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.ExamGradeDistribution)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.UserGradeDistribution)),
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: '@Localizer["Grade"]'
                        },
                        beginAtZero: true
                    },
                    y: {
                        title: {
                            display: true,
                            text: '@Localizer["NumberOfStudents"]'
                        },
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        },
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    </script>
}