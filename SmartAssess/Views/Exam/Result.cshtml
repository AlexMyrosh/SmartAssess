@using ViewModels.Enums
@model Presentation_Layer.ViewModels.Exam.ExamResultViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["ExamResult"];
}

<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-1 mx-auto text-center">
        @Localizer["UsersAnswersForExam"] "@Model.ExamName"
    </h1>
</div>

@* Filters *@
<div style="display: flex; flex-wrap: wrap; align-items: center; gap: 10px;" class="mb-3">
    <div class="form-floating flex-grow-1">
        <input type="text" id="searchInput" name="searchQuery" class="form-control" placeholder="@Localizer["SearchByStudentName"]">
        <label for="searchInput">@Localizer["SearchByStudentName"]</label>
    </div>
    <div style="display: flex; flex-shrink: 0; gap: 10px;">
        <div class="dropdown ">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="statusButton">
                @Localizer["StatusAll"]
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('statusButton', '@Localizer["StatusAll"]'); filterData();">@Localizer["All"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('statusButton', '@Localizer["StatusPassed"]'); filterData();">@Localizer["Passed"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('statusButton', '@Localizer["StatusFailed"]'); filterData();">@Localizer["Failed"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('statusButton', '@Localizer["StatusNotAssessed"]'); filterData();">@Localizer["NotAssessed"]</a></li>
            </ul>
        </div>
        <div class="dropdown ">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="sortByGradeButton">
                @Localizer["SortByGradeDefault"]
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('sortByGradeButton', '@Localizer["SortByGradeDefault"]'); filterData();">@Localizer["Default"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('sortByGradeButton', '@Localizer["SortByGradeFromMinToMax"]'); filterData();">@Localizer["FromMinToMax"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('sortByGradeButton', '@Localizer["SortByGradeFromMaxToMin"]'); filterData();">@Localizer["FromMaxToMin"]</a></li>
            </ul>
        </div>
        <div class="dropdown ">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="isCheckedButton">
                @Localizer["IsCheckedAll"]
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedButton', '@Localizer["IsCheckedAll"]'); filterData();">@Localizer["All"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedButton', '@Localizer["IsCheckedYes"]'); filterData();">@Localizer["Yes"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedButton', '@Localizer["IsCheckedNo"]'); filterData();">@Localizer["No"]</a></li>
            </ul>
        </div>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="isCheckedByAIBtn">
                @Localizer["IsCheckedByAIAll"]
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedByAIBtn', '@Localizer["IsCheckedByAIAll"]'); filterData();">@Localizer["All"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedByAIBtn', '@Localizer["IsCheckedByAIYes"]'); filterData();">@Localizer["Yes"]</a></li>
                <li><a class="dropdown-item" href="#" onclick="updateButtonText('isCheckedByAIBtn', '@Localizer["IsCheckedByAINo"]'); filterData();">@Localizer["No"]</a></li>
            </ul>
        </div>
    </div>
</div>

<div class="accordion" id="accordionPanelsStayOpenExample">
    @foreach (var userAttempts in Model.UserAttempts)
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="student-@userAttempts.Key.Id-header">
                <button class="accordion-button collapsed second-level-collapse"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target="#student-@userAttempts.Key.Id"
                        aria-expanded="false"
                        aria-controls="student-@userAttempts.Key.Id"
                        style="box-shadow: none; display: flex; justify-content: space-between; align-items: center; width: 100%; padding-right: 20px;">
                    <span class="usernames">
                        @userAttempts.Key.FirstName @userAttempts.Key.LastName
                    </span>

                    @if (userAttempts.Value.FinalGrade != null)
                    {
                        <span>&nbsp;-&nbsp;</span>
                        <span class="finaGrade">@userAttempts.Value.FinalGrade</span>
                        <span>/@Model.MaxPossibleExamGrade</span>
                    }

                    <span style="position: absolute; right: 58px;">
                        @if (userAttempts.Value.FinalGrade != null && userAttempts.Value.FinalGrade >= Model.MinimumPassGrade)
                        {
                            <span class="finalUserExamStatus passed">@Localizer["PassedCap"]</span>
                        }
                        else if (userAttempts.Value.FinalGrade != null && userAttempts.Value.FinalGrade < Model.MinimumPassGrade)
                        {
                            <span class="finalUserExamStatus failed">@Localizer["FailedCap"]</span>
                        }
                        else if (userAttempts.Value.FinalGrade is null)
                        {
                            <span class="finalUserExamStatus not-assessed">@Localizer["NotAssessedCap"]</span>
                        }
                    </span>
                </button>
            </h2>

            <div id="student-@userAttempts.Key.Id" class="accordion-collapse collapse" aria-labelledby="student-@userAttempts.Key.Id-header">
                <div class="accordion-body p-0">
                    <section class="intro">
                        <table class="table mb-0">
                            <thead>
                            <tr>
                                <th class="text-center" scope="col">@Localizer["Attempt"]</th>
                                <th class="text-center" scope="col">@Localizer["Grade"]</th>
                                <th class="text-center" scope="col">@Localizer["TimeToComplete"]</th>
                                <th class="text-center" scope="col">@Localizer["IsChecked"]</th>
                                <th class="text-center" scope="col">@Localizer["IsCheckedByAI"]</th>
                                <th class="text-center" scope="col">@Localizer["Status"]</th>
                                <th class="text-center" scope="col">@Localizer["Actions"]</th>
                            </tr>
                            </thead>
                            <tbody>
                            @for (var i = 0; i < userAttempts.Value.UserAttempts.Count; i++) {
                                <tr>
                                    <td class="text-center align-middle">@(i + 1)</td>
                                    <td class="text-center align-middle">
                                        @if (userAttempts.Value.UserAttempts[i].IsExamAssessed)
                                        {
                                            @userAttempts.Value.UserAttempts[i].TotalGrade
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                     <td class="text-center align-middle">@userAttempts.Value.UserAttempts[i].TakenTimeToComplete.ToString(@"hh\:mm\:ss")</td>
                                    <td class="text-center align-middle">
                                        @if (userAttempts.Value.UserAttempts[i].IsExamAssessed)
                                        {
                                            <i class="fas fa-check" style="color: green; font-size: 25px;"></i>
                                        }
                                        else
                                        {
                                            <i class="fa fa-close" style="font-size:30px;color:red"></i>
                                        }
                                    </td>
                                    <td class="text-center align-middle">
                                        @if (userAttempts.Value.UserAttempts[i].IsExamAssessed)
                                        {
                                            @if (userAttempts.Value.UserAttempts[i].IsExamAssessedByAi)
                                            {
                                                <i class="fas fa-check" style="color: green; font-size: 25px;"></i>
                                            }
                                            else
                                            {
                                                <i class="fa fa-close" style="font-size:30px;color:red"></i>
                                            }
                                        }
                                    </td>
                                    <td class="text-center align-middle">
                                            @if (!userAttempts.Value.UserAttempts[i].IsExamAssessed)
                                        {
                                            <span class="not-assessed">@Localizer["NotAssessed"]</span>
                                        }
                                            else if (userAttempts.Value.UserAttempts[i].TotalGrade >= Model.MinimumPassGrade)
                                        {
                                            <span class="passed">@Localizer["Passed"]</span>
                                        }
                                        else
                                        {
                                            <span class="failed">@Localizer["Failed"]</span>
                                        }
                                    </td>
                                    <td class="text-center align-middle">
                                        <div class="d-flex justify-content-center align-items-center">
                                            @if (userAttempts.Value.UserAttempts[i].Status == ExamAttemptStatusViewModel.AssessingByAI)
                                            {
                                                <button class="btn btn-outline-info me-2" disabled="disabled">@Localizer["AssessingByAI"]</button>
                                            }
                                            else
                                            {
                                                <button type="submit" class="btn btn-outline-info me-2 assessByAiButton" data-userExamAttemptId="@userAttempts.Value.UserAttempts[i].AttemptId">@Localizer["AssessByAI"]</button>
                                            }

                                            @Html.ActionLink(@Localizer["AssessManually"].Value, "ManualEvaluation", "ExamAssessment", new { examId = userAttempts.Value.UserAttempts[i].AttemptId }, new { @class = "btn btn-outline-info me-2" })
                                            @Html.ActionLink(@Localizer["ViewAnswers"].Value, "TakenExamDetails", "ExamAssessment", new { id = userAttempts.Value.UserAttempts[i].AttemptId }, new { @class = "btn btn-outline-info" })
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </section>
                </div>
            </div>
        </div>
    }
</div>
@if (Model.UserAttempts.Count == 0)
{
    <div class="text-center mb-5 mt-5">
        <h1 class="display-4">
            @Localizer["NoOneHasPassedTheExamYet"]
        </h1>
    </div>
}

<div id="noResultsContainer" class="text-center mb-5 mt-5" style="display:none;">
    <h1 class="display-4">
        @Localizer["NothingFoundTryUpdateTheFilters"]
    </h1>
</div>

<!-- Notification message -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="testToast" class="toast bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
            <div class="d-flex gap-4">
                <span> <i class="fa fa-check-circle fa-lg"></i></span>
                <div class="d-flex flex-grow-1 align-items-center">
                    <span class="fw-semibold" id="testToastMessage" style="font-size: initial;"></span>
                </div>
                <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('.assessByAiButton').on('click', function (e) {
            e.preventDefault(); // Prevent the default form submission behavior

            var userExamAttemptId = $(this).data('userexamattemptid'); // Get the userExamAttemptId from the button

            $.ajax({
                url: '@Url.Action("AiEvaluation", "ExamAssessment")',
                type: 'POST',
                data: { userExamAttemptId: userExamAttemptId }, // Pass the ID to the controller
                success: function (response) {
                    var toastEl = $('#testToast');
                    var toastMessage = $('#testToastMessage');
                    toastMessage.text(`@Localizer["AIEvaluationCompleted"]`);
                    var toast = new bootstrap.Toast(toastEl);
                    toast.show();
                }
            });

            var numberOfQuestions = $(this).data('question-count');
            var timeToComplete = numberOfQuestions * 14;

            var toastEl = $('#testToast');
            var toastMessage = $('#testToastMessage');
            toastMessage.text(`@Localizer["ExecutionStartedInBackground"]`);
            var toast = new bootstrap.Toast(toastEl);
            toast.show();

            $(this).addClass('disabled');
            $(this).text('@Localizer["AssessingByAI"]');
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');

            searchInput.addEventListener('keyup', filterData);
        });
    </script>

    <script>
        function filterData() {
            var statusValue = document.getElementById('statusButton').innerText.replace('@Localizer["StatusDash"]', '');
            var isCheckedValue = document.getElementById('isCheckedButton').innerText.replace('@Localizer["IsCheckedDash"]', '');
            var isCheckedByAIValue = document.getElementById('isCheckedByAIBtn').innerText.replace('@Localizer["IsCheckedByAIDash"]', '');
            const sortByGrade = document.getElementById('sortByGradeButton').innerText.replace('@Localizer["SortByGradeDash"]', '');
            let searchQuery = document.getElementById('searchInput').value.toLowerCase();

            const userAttemptRows = document.querySelectorAll('.accordion-item');
            for (let i = 0; i < userAttemptRows.length; i++) {
                let rows = Array.from(userAttemptRows[i].querySelectorAll("table tbody tr"));

                // Filtering logic
                rows.forEach(row => {
                    var isChecked = row.cells[3].innerHTML.includes('fa-check');
                    var isCheckedByAI = row.cells[4].innerHTML.includes('fa-check');

                    var shouldDisplay = true;

                    if (isCheckedValue === '@Localizer["Yes"]' && !isChecked) {
                        shouldDisplay = false;
                    }

                    if (isCheckedValue === '@Localizer["No"]' && isChecked) {
                        shouldDisplay = false;
                    }

                    if (isCheckedByAIValue === '@Localizer["Yes"]' && !isCheckedByAI) {
                        shouldDisplay = false;
                    }

                    if (isCheckedByAIValue === '@Localizer["No"]' && (isCheckedByAI || !isChecked)) {
                        shouldDisplay = false;
                    }

                    row.style.display = shouldDisplay ? '' : 'none';
                });

                // Re-append rows in sorted or original order
                rows.forEach(row => userAttemptRows[i].querySelector('tbody').appendChild(row));
                const allHidden = Array.from(rows).every(tr => tr.style.display === 'none');

                if (allHidden) {
                    userAttemptRows[i].style.display = "none";
                } else {
                    userAttemptRows[i].style.removeProperty('display');
                }

                const finalStatus = userAttemptRows[i].querySelector(".finalUserExamStatus").innerText;
                if (statusValue.toLowerCase().trim() !== '@Localizer["AllLowerCase"]') {
                    if (statusValue.toLowerCase() === finalStatus.toLowerCase()) {
                        userAttemptRows[i].style.removeProperty('display');
                    } else {
                        userAttemptRows[i].style.display = "none";
                    }
                }

                const studentName = userAttemptRows[i].querySelector('button.accordion-button .usernames').textContent.toLowerCase();
                if (studentName.includes(searchQuery) && window.getComputedStyle(userAttemptRows[i]).display !== 'none') {
                    userAttemptRows[i].style.display = '';
                } else {
                    userAttemptRows[i].style.display = 'none';
                }
            }

            let sortedRows;

            if (sortByGrade === 'Default') {
                // No sorting, just keep the original order
                sortedRows = Array.from(userAttemptRows);
            } else {
                sortedRows = Array.from(userAttemptRows).sort((a, b) => {
                    const finaGradeA = a.querySelector('.finaGrade');
                    const finaGradeB = b.querySelector('.finaGrade');

                    // If one of the elements doesn't have a finaGrade, move it to the end
                    if (!finaGradeA) return 1;
                    if (!finaGradeB) return -1;

                    // If both have finaGrade, compare the numeric values
                    const gradeA = parseFloat(finaGradeA.textContent);
                    const gradeB = parseFloat(finaGradeB.textContent);

                    if (sortByGrade === '@Localizer["FromMinToMax"]') {
                        return gradeA - gradeB; // Ascending order
                    } else if (sortByGrade === '@Localizer["FromMaxToMin"]') {
                        return gradeB - gradeA; // Descending order
                    }
                });
            }

            // Append sorted rows back to their parent container
            const parentContainer = document.querySelector('.accordion');
            sortedRows.forEach(row => parentContainer.appendChild(row));

            const rowsAfterFitlers = document.querySelectorAll('.accordion-item');
            const allHiddenAfterFilters = Array.from(rowsAfterFitlers).every(el => el.style.display === 'none');
            if (allHiddenAfterFilters) {
                document.getElementById('noResultsContainer').style.display = "block";
            } else {
                document.getElementById('noResultsContainer').style.display = "none";
            }
        }
    </script>

    <script>
        function updateButtonText(buttonId, newText) {
            document.getElementById(buttonId).textContent = newText;
        }
    </script>
}